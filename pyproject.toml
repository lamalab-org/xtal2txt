[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "xtal2txt"
version = "0.0.1-dev"
description = "Package to encode and decode crystal structures into text representations"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Nawaf Alampara" },
    { name = "Reza Aliakbari" },
    { name = "Santiago Miret" },
    { name = "Kevin Maik Jablonka", email = "mail@kjablonka.com" },
]
maintainers = [
    { name = "Nawaf Alampara", email = "nawaf.alampara@uni-jena.de" },
    { name = "Kevin Maik Jablonka", email = "mail@kjablonka.com" },
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]
keywords = ["llm", "materials", "chemistry"]
dependencies = ["transformers", "slices", "robocrys", "matminer", "keras"]
[project.urls]
Homepage = "https://github.com/lamalab-org/xtal2txt"
Issues = "https://github.com/lamalab-org/xtal2txt/issues"

[project.optional-dependencies]
tests = ["pytest", "coverage"]
docs = [
    "mkdocs",
    "mkdocs-autorefs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
]
decoder = ["pyxtal"]


[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.coverage.run]
branch = true
source = ["xtal2txt"]
omit = ["tests/*", "docs/*"]

[tool.coverage.paths]
source = ["src/xtal2txt", ".tox/*/lib/python*/site-packages/xtal2txt"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == '__main__'",
    "if TYPE_CHECKING",
    "def __str__",
    "def __repr__",
]
